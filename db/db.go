package db

import (
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"
)

type PostgresDB struct {
	Host     string
	Port     uint
	Name     string
	Username string
	Password string
	Ssl      string
}

func (p PostgresDB) Init() (*sql.DB, error) {
	psqlInfo := fmt.Sprintf("host=%s port=%d user=%s password=%s sslmode=%s",
		p.Host, p.Port, p.Name, p.Password, p.Ssl)
	db, err := open("postgres", psqlInfo)
	if err != nil {
		return nil, err
	}
	err = createDB(db, p.Name)
	if err != nil {
		return nil, err
	}
	return db, nil
}

func open(driverName, dataSource string) (*sql.DB, error) {
	db, err := sql.Open(driverName, dataSource)
	if err != nil {
		return nil, err
	}
	return db, nil
}

func close(db *sql.DB) error {
	return db.Close()
}

func createDB(db *sql.DB, name string) error {
	_, err := db.Exec("CREATE DATABASE " + name)
	return err
}

func resetDB(db *sql.DB, name string) error {
	_, err := db.Exec("DROP DATABASE IF EXISTS " + name)
	if err != nil {
		return err
	}
	return createDB(db, name)
}

func ResetDB(driverName, dataSource, dbName string) error {
	db, err := sql.Open(driverName, dataSource)
	if err != nil {
		return err
	}
	err = resetDB(db, dbName)
	if err != nil {
		return err
	}
	return close(db)
}
