package db

import (
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"
)

type PostgresInfo struct {
	Host     string
	Port     uint
	Name     string
	Username string
	Password string
	Ssl      string
}

type PostgresStorage struct {
	db *sql.DB
}

func psqlInfo(p PostgresInfo) string {
	return fmt.Sprintf("host=%s port=%d user=%s password=%s sslmode=%s",
		p.Host, p.Port, p.Username, p.Password, p.Ssl)
}

func NewPsql(pInfo PostgresInfo) (*PostgresStorage, error) {
	db, err := sql.Open("postgres", psqlInfo(pInfo))
	if err != nil {
		return nil, fmt.Errorf("can't open database: %w", err)
	}

	if err := db.Ping(); err != nil {
		return nil, fmt.Errorf("can't connect to database: %w", err)
	}

	return &PostgresStorage{db: db}, nil
}

func close(db *PostgresStorage) error {
	return db.db.Close()
}

func create(db *PostgresStorage, name string) error {
	_, err := db.db.Exec("CREATE DATABASE " + name)
	return err
}

//func drop(db *PostgresStorage, name string) error {
//	_, err := db.db.Exec("DROP DATABASE " + name)
//	if err != nil {
//		return err
//	}
//	return create(db, name)
//}

//func (p *PostgresInfo) reset() error {
//	db, err := sql.Open("postgres", psqlInfo(p))
//	if err != nil {
//		return err
//	}
//	err = drop(db, p.Name)
//	if err != nil {
//		return err
//	}
//	return close(db)
//}

//func insertRow(db *sql.DB, tableName, columns, values string) error {
//	statement := fmt.Sprintf(`INSERT INTO %s (%s) VALUES (%s)`, tableName, columns, values)
//	_, err := db.Exec(statement)
//	//	var scannedValue int
//	//	err := db.QueryRow(statement).Scan(&scannedValue)
//	return err
//}
