package sqlite

import (
	"database/sql"
	"expdb/models"
	"fmt"
	"strings"

	_ "github.com/mattn/go-sqlite3"
)

type Storage struct {
	db *sql.DB
}

func New(path string) (*Storage, error) {
	db, err := sql.Open("sqlite3", path)
	if err != nil {
		return nil, fmt.Errorf("can't open database: %w", err)
	}

	if err := db.Ping(); err != nil {
		return nil, fmt.Errorf("can't connect to database: %w", err)
	}

	return &Storage{db: db}, nil
}

func (s *Storage) Init() error {
	statement := `CREATE TABLE IF NOT EXISTS exploits (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		date VARCHAR(10),
		title TEXT,
		type TEXT,
		platform TEXT)`

	_, err := s.db.Exec(statement)
	if err != nil {
		return fmt.Errorf("can't create table: %w", err)
	}

	return nil
}

func (s *Storage) Insert(e *models.Exploit) error {
	statement := `INSERT INTO exploits (date, title, type, platform) VALUES (?, ?, ?, ?)`

	if _, err := s.db.Exec(statement, e.Date, e.Title, e.Type, e.Platform); err != nil {
		return fmt.Errorf("can't insert exploit to database: %w", err)
	}
	return nil
}

func (s *Storage) Remove(e *models.Exploit) error {
	statement := `DELETE FROM exploits WHERE date = ? AND title = ? AND type = ? AND platform = ?`

	if _, err := s.db.Exec(statement, e.Date, e.Title, e.Type, e.Platform); err != nil {
		return fmt.Errorf("can't delete exploit: %w", err)
	}

	return nil
}

func (s *Storage) Print() (string, error) {
	var expSliceString []string
	expSlice, err := s.StorageAsSlice()
	if err != nil {
		return "", fmt.Errorf("can't get slice: %w", err)
	}

	for _, v := range expSlice {
		expSliceString = append(expSliceString, fmt.Sprintln(v.Date, v.Title, v.Type, v.Platform))
	}
	return strings.Join(expSliceString, "\n"), nil
}

func (s *Storage) StorageAsSlice() ([]models.Exploit, error) {
	statement := `SELECT * FROM exploits`
	var exploits []models.Exploit

	rows, err := s.db.Query(statement)
	if err != nil {
		return nil, fmt.Errorf("can't query rows: %w", err)
	}

	for rows.Next() {
		var id, date, title, typeExp, platform string

		if err := rows.Scan(&id, &date, &title, &typeExp, &platform); err != nil {
			return nil, fmt.Errorf("can't scan rows: %w", err)
		}
		exploits = append(exploits, models.Exploit{date, title, typeExp, platform})
	}

	return exploits, nil
}

func (s *Storage) GetById(id int) (*models.Exploit, error) {
	statement := `SELECT * FROM exploits WHERE id = ?`
	var ident, date, title, typeExp, platform string

	err := s.db.QueryRow(statement, id).Scan(&ident, &date, &title, &typeExp, &platform)
	if err != nil {
		return nil, fmt.Errorf("can't scan rows: %w", err)
	}

	return &models.Exploit{date, title, typeExp, platform}, nil
}

func (s *Storage) GetId(e *models.Exploit) (string, error) {
	statement := `SELECT id FROM exploits WHERE date = ? AND title = ? AND type = ? AND platform = ?`
	var id string

	err := s.db.QueryRow(statement, e.Date, e.Title, e.Type, e.Platform).Scan(&id)
	if err != nil {
		return "", fmt.Errorf("can't scan rows: %w", err)
	}

	return id, nil
}
