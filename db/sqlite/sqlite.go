package sqlite

import (
	"database/sql"
	"expdb/models"
	"fmt"

	_ "github.com/mattn/go-sqlite3"
)

type Storage struct {
	db *sql.DB
}

func New(path string) (*Storage, error) {
	db, err := sql.Open("sqlite3", path)
	if err != nil {
		return nil, fmt.Errorf("can't open database: %w", err)
	}

	if err := db.Ping(); err != nil {
		return nil, fmt.Errorf("can't connect to database: %w", err)
	}

	return &Storage{db: db}, nil
}

func (s *Storage) Init() error {
	statement := `CREATE TABLE IF NOT EXISTS exploits (
		date VARCHAR(12),
		title TEXT,
		type TEXT,
		platform TEXT)`

	_, err := s.db.Exec(statement)
	if err != nil {
		return fmt.Errorf("can't create table: %w", err)
	}

	return nil
}

func (s *Storage) Insert(e *models.Exploit) error {
	statement := `INSERT INTO exploits (date, title, type, platform) VALUES (?, ?, ?, ?)`

	if _, err := s.db.Exec(statement, e.Date, e.Title, e.Type, e.Platform); err != nil {
		return fmt.Errorf("can't insert exploit to database: %w", err)
	}
	return nil
}

func (s *Storage) Print() (string, error) {
	statement := `SELECT * FROM exploits`
	var result string
	rows, err := s.db.Query(statement)
	if err != nil {
		return "", fmt.Errorf("can't query rows: %w", err)
	}
	for rows.Next() {
		var date, title, typeExp, platform string

		if err := rows.Scan(&date, &title, &typeExp, &platform); err != nil {
			return "", fmt.Errorf("can't scan rows: %w", err)
		}
		result += fmt.Sprintln(date, title, typeExp, platform, "\n")
	}
	return result, nil
}
